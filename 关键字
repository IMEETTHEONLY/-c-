#include <stdio.h>
//int main()
//{
//	register int a = 10;//建议把a定义成寄存器变量
//	printf("a=%d\n", a);
//
//
//
//	return 0;
//}


//#include <stdio.h>
//int main()
//{
//	auto int a = 10;//auto用在局部变量前面，一般来说是自动省略掉的，但是可以加上+
//	printf("a=%d\n", a);
//
//
//
//	return 0;
//}



//#include <stdio.h>
//int main()
//{
//	typedef unsigned int u_int;    //重定义了类型int变成了u_int,两者的含义一样（相当于有了别名）
//	unsigned int num = 20;
//	u_int num2 = 20;
//	printf("num=%d\nnum2=%d\n", num, num2);
//
//
//	return 0;
//}








//static修饰局部变量使其生命周期边长
//#include <stdio.h>
//void test()
//{
//	static int a = 1;
//	a++;
//	printf("a=%d\n", a);  //static是一个静态局部变量，意思是加了之后，int的数据就不会被摧毁，打印出来的是2.3.4.5.6，要是不加打印出来就是22222
//
//
//
//}
//int main()
//{
//	int i = 0;
//	while (i < 5)
//	{
//		test();
//		i++;
//	
//
//	}
//
//	return 0;
//}
//
//



//static修饰全局变量使其作用范围只能在其自己的源文件
//#include <stdio.h>
// int main()
//{
//	 extern int g_val;
//	printf("g_val=%d\n",g_val);
//
//	return 0;
//}


//static修饰函数改变其链接属性，使其只能在一个源文件内使用
//#include <stdio.h>
//int main()
//{
//	int num1 = 20;
//	int num2 = 30;
//	int sum = Add(num1, num2);
//	printf("sum=%d\n", sum);
//
//
//
//}

//宏的使用
//#include <stdio.h>
//int Max(int x, int y)//比较大小函数的方法
//{
//	if (x > y)
//		return x;
//	else
//		return y;
//}
//
//
//#define MAX(X,Y)(X>Y?X:Y)  //类似于三目操作符
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//函数的方式
//	int max = Max(a, b);
//	printf("%d\n", max);
//
//	//宏的方式
//	max = MAX(a, b);
//	printf("%d\n", max);
//
//
//
//}

